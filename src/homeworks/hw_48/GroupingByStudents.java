package homeworks.hw_48;

import lesson_48.Employee;

import java.util.*;
import java.util.stream.Collectors;

/*** Author: Roman Romashko Date: 04.04.2025 ***/

/*
    Task 4 –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ
    –ü—Ä–∞–∫—Ç–∏–∫—É–µ–º groupingBy
  + –°–æ–∑–¥–∞–π —Å–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ (List) ‚Äî –º–∏–Ω–∏–º—É–º 10 –æ–±—ä–µ–∫—Ç–æ–≤, —Å —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏.

    –ó–∞–¥–∞–Ω–∏—è:
  + –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏: –°–≥—Ä—É–ø–ø–∏—Ä—É–π —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –ø–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ (–ø–æ–ª–µ major) –≤ Map<String, List>.
  +  –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –∫—É—Ä—Å—É —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Set: –°–≥—Ä—É–ø–ø–∏—Ä—É–π —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –ø–æ –∫—É—Ä—Å—É (year), –ø—Ä–∏ —ç—Ç–æ–º —Å–æ—Ö—Ä–∞–Ω–∏ –∏—Ö –≤ –≤–∏–¥–µ Set.
  +  –ü–æ–¥—Å—á—ë—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –ø–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏: –ü–æ—Å—Ç—Ä–æ–π Map<String, Long>, –≥–¥–µ –∫–ª—é—á ‚Äî —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å, –∞ –∑–Ω–∞—á–µ–Ω–∏–µ ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –Ω–∞ —ç—Ç–æ–π —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏.
  +  –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª –ø–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏: –ü–æ—Å—Ç—Ä–æ–π Map<String, Double>, –≥–¥–µ –∫–ª—é—á ‚Äî —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å, –∞ –∑–Ω–∞—á–µ–Ω–∏–µ ‚Äî —Å—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –Ω–∞ —ç—Ç–æ–π —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏.
  +  –°–ø–∏—Å–æ–∫ –æ—Ü–µ–Ω–æ–∫ –ø–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏: –ü–æ—Å—Ç—Ä–æ–π Map<String, List>, –≥–¥–µ —Ö—Ä–∞–Ω—è—Ç—Å—è —Ç–æ–ª—å–∫–æ –æ—Ü–µ–Ω–∫–∏ –ø–æ –∫–∞–∂–¥–æ–π —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏.

  +  –°—É–º–º–∞—Ä–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É: –ò—Å–ø–æ–ª—å–∑—É–π IntSummaryStatistics, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å:
    –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç,
    –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç,
    —Å—Ä–µ–¥–Ω–∏–π –≤–æ–∑—Ä–∞—Å—Ç,
    –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤,
    —Å—É–º–º—É –≤—Å–µ—Ö –≤–æ–∑—Ä–∞—Å—Ç–æ–≤.

    –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
    –í—Å—è –ª–æ–≥–∏–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞ –≤ main().
    –ù–µ –∑–∞–±—É–¥—å –¥–æ–±–∞–≤–∏—Ç—å toString() –≤ –∫–ª–∞—Å—Å Student –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞.
    –ü–æ—Å—Ç–∞—Ä–∞–π—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Stream API –∏ Collectors –∫–∞–∫ –Ω–∞ —É—Ä–æ–∫–µ.
    üîÑ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ (–ø–æ –∂–µ–ª–∞–Ω–∏—é):

    –°–≥—Ä—É–ø–ø–∏—Ä—É–π —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –ø–æ –∫—É—Ä—Å—É, –∏ –≤–Ω—É—Ç—Ä–∏ –∫–∞–∂–¥–æ–≥–æ –∫—É—Ä—Å–∞ —Å–≥—Ä—É–ø–ø–∏—Ä—É–π –ø–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏: ‚Üí Map<Integer, Map<String, List>>
 */

public class GroupingByStudents {
    public static void main(String[] args) {

        List<Student> students = new ArrayList<>(List.of(
                new Student("Alisa", 20, "IT", 1, 4.0),
                new Student("Bob", 21, "Math", 2, 3.8),
                new Student("Charlie", 22, "IT", 2, 4.2),
                new Student("Diana", 23, "Physics", 3, 4.5),
                new Student("Eva", 20, "Math", 1, 4.1),
                new Student("Frank", 24, "IT", 4, 3.7),
                new Student("Grisha", 21, "Physics", 2, 4.0),
                new Student("Mike", 25, "IT", 3, 3.9),
                new Student("Iva", 22, "Math", 3, 3.6),
                new Student("Jack", 23, "Physics", 4, 4.3)

        ));

        // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏

        Map<String, List<Student>> byMajor = students.stream()
                .collect(Collectors.groupingBy(Student::getMajor));

        System.out.println("grouping by department map: ");

        byMajor.forEach((major, studentList)->System.out.println(major+ ": "+studentList) );


        // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –∫—É—Ä—Å—É —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Set

        Map<Integer, Set<Student>> map = students.stream()
                .collect(Collectors.groupingBy(Student::getYear, Collectors.toSet()));

        printMap(map);

        // –ü–æ–¥—Å—á—ë—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –ø–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏

        Map<String, Long> countByMajor = students.stream()
                .collect(Collectors.groupingBy(Student::getMajor, Collectors.counting()));

        printMap(countByMajor);


        // –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª –ø–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏

        Map<String, Double> avgGrade = students.stream()
                .collect(Collectors.groupingBy(Student::getMajor, Collectors.averagingDouble(Student::getGrade)));

        printMap(avgGrade);

        // –°–ø–∏—Å–æ–∫ –æ—Ü–µ–Ω–æ–∫ –ø–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏:

        Map<String, List<Double>> gradesByMajor = students.stream()
                .collect(Collectors.groupingBy(Student::getMajor,
                        Collectors.mapping(Student::getGrade, Collectors.toList())));

        printMap(gradesByMajor);


        // –°—É–º–º–∞—Ä–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É:

        IntSummaryStatistics stats = students.stream()
                .collect(Collectors.summarizingInt(Student::getAge));

        System.out.println("min: " + stats.getMin());
        System.out.println("max: " + stats.getMax());
        System.out.println("avg: " + stats.getAverage());
        System.out.println("count: " + stats.getCount());
        System.out.println("sum: " + stats.getSum());

        // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –∫—É—Ä—Å—É –∏ –≤–Ω—É—Ç—Ä–∏ –ø–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏:

        Map<Integer, Map<String, List<Student>>> majorGrouping = students.stream()
                .collect(Collectors.groupingBy(Student::getYear,
                        Collectors.groupingBy(Student::getMajor)));


        printMap(majorGrouping);


    }
    private static <K, V> void printMap(Map<K, V> map) {
        map.forEach((k, v) -> System.out.println(k + " : " + v));
        System.out.println("======================\n");
    }


}
